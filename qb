#!/bin/env bash
# iarom madden mail@iarom.org
# qutebrowser profile launcher and qb as mutt viewer


# init ########################################


[ -n "$1" ] && { cmd="$1" ; shift 1; }


_init() {
    qute_bin="/usr/bin/qutebrowser"
    qb_version='3.2.1'
    proto_version=1
    args=()
    args_startup=() 
    #soc_ipc="$(echo ${XDG_RUNTIME_DIR}/qutebrowser/*)"
    soc_ipc="${XDG_RUNTIME_DIR}/qutebrowser/ipc-$(echo -n "$USER" | md5sum | cut -d' ' -f1)"
    dat_dir="${XDG_DATA_HOME}/qutebrowser"
    cac_dir=""
    cfg_fil=""
    cac_dir_x="/home/$USER/.cache/qutebrowserx"
    cac_dir_m="/home/$USER/.cache/qutebrowserm"
    config_x="$HOME/.config/qutebrowser/profile-x.py"
    config_m="$HOME/.config/qutebrowser/profile-m.py"
    declare -rg mlx_fil_x="file:///run/user/$UID/mutt/mlx.html"
    declare -rg mlx_fil_y="file:///run/user/$UID/mutt/mly.html"
}

_qq_ini_qt() {
  args_startup+=( '--qt-flag' 'ignore-gpu-blacklist' )
  args_startup+=( '--qt-flag' 'enable-gpu-rasterisation' )
  args_startup+=( '--qt-flag' 'enable-native-gpu-memory-buffers' )
  args_startup+=( '--qt-flag' 'num-raster-threads=4' )
  args_startup+=( '--qt-flag' 'enable-accelerated-video-decode' )
  args_startup+=( '--qt-flag' 'enable-features=VaapiVideoDecoder' )
  args_startup+=( '--qt-flag' 'enable-features=WebGPU' )
  args_startup+=( '--qt-flag' 'use-gl=desktop' )
  args_startup+=( '--qt-flag' 'enable-oop-rasterization' )
  args_startup+=( '--qt-flag' 'enable-raw-draw' ) ;}

_ini_profile() { # set up on new system
    dictionaries="${HOME}/.local/share/qutebrowser/qtwebengine_dictionaries"
    /usr/share/qutebrowser/scripts/dictcli.py install en-GB
    ln -s ${dictionaries} ${cac_dir_x}/data/
    ln -s ${dictionaries} ${cac_dir_m}/data/
    #ln -s ${dictionaries} ${cac_dir_x}/data/
}

# main #########################################

# factoring here was to make clear the structure of multiple layers of piping

_qute_str() { "$qute_bin" "${args_startup[@]}" & }

_qute_cmd() { # order of items matters; highly unstable to format innacuracies
    printf '{"args": ["%s"], "target_arg": null, "version": "%s", "protocol_version": %d, "cwd": "%s"}\n' \
       "${args}" \
       "${qb_version}" \
       "${proto_version}" \
       "${PWD}" | socat -lf /dev/null - UNIX-CONNECT:"${soc_ipc}" || _qute_str &
}

# primary instance ###################################

_mli() {
    
    ses_fil="${dat_dir}/sessions/_autosave.yml"
    grep -q "url: ${1}" ${ses_fil} \
        && args+=( ":tab-select ${1} ;; reload" ) \
        || args+=( ":open -w ${1}" )
}


_qa() {
    
    [ -n "${@}" ] && { \
        case ${1} in
            mlx)  _mli "${mlx_fil_x}" ;;
            mly)  _mli "${mlx_fil_y}" ;;
            win)  shift 1 args+=(":open -w ${@}") ;;
            tab)  
                  shift 1
                  args+=(":open -t ${@}") 
                  #args_startup+=( 
                ;;
            *)    args+=(":open -t ${@}") ;;
        esac } || args+=(":open -w")
    
    args_startup+=( "${@}" ) # TODO: modify qute_bin?
    args_startup+=( ":open ${1}" )
    #args_startup+=( '--override-restore' )

    _qute_cmd & }


# profile selectors ################################

_qq_i() {
    
    cac_dir="${1}" # vars also used in mlx & mly
    cfg_fil="${2}"
    shift 2

    args_startup+=( "--basedir"          "${cac_dir}" )
    args_startup+=( "--config-py"        "${cfg_fil}" )

    soc_ipc="$(echo ${cac_dir}/runtime/*)"

    _qa ${@} ; }


# profiles #######################################

_qx() { _qi "${cac_dir_x}" "${config_x}" ${@} ; }

_qm() { _qi "${cac_dir_m}" "${config_m}" ${@} ; }


# main ####################################

_main() {

    _init

    case $cmd in
        # profile x
        xw|xwin|x)        _qx ${@} ;; # dup of 'x'
        xt|xtab)          _qx ${@} ;;
        xc|xcmd)          _qx ${@} ;;
        # profile mail
        mt|mtab)          _qm tab ${@} ;;
        mw|mwin)          _qm win ${@} ;;
        mc|qmutt|m)       _qm ${@} ;;
        # mail in profile a
        my)               _qa mly ${@} ;;
        mx)               _qa mlx ${@} ;;
        # webapps
        w.gpt|gpt)        _qa win "chat.openai.com" ;;
        w.wa|wa|whatsapp) _qa win "web.whatsapp.com" ;;
        # profile a
        t|tab)            _qa tab "${@}" ;;
        w|win)            _qa win "${@}" ;;
        c|cmd)            _qa "${@}" ;;
        *)                _qa "${cmd}" "${@}" ;;
    esac }
        #w.xx) 	          w_xx ;;
        #f|win.float)      _qa_float "${@}" ;; # TODO: refer to bottom

_main ${@}

# Note - web apps
# TASK: add these to eg shell aliases or i3x
# - is there a way to feed the 'target' so the behaviour is
# consistent whether starting up qb or using a current instance?
# Could just set unique 'args_startup' within the 'case' within
# _qa?
# On second consideration, recall that 'target' is for startup
# which always tends to assume 'window'. Considering we now
# feed command arguments to qb via soc, the 'target' is now
# redundant.

