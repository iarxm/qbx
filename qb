#!/bin/env bash

# IAROM MADDEN mail@iarom.org
# qutebrowser profile launcher and qb as mutt viewer

[ -n "${1}" ] && { cmd="${1}" ; shift 1; }

_ini()
{
    qute_bin="/usr/bin/qutebrowser"
    qb_version='3.2.1'
    proto_version=1
    args=()
    args_startup=() 
    bas_dir=""
    cfg_fil=""
    dat_dir="${XDG_DATA_HOME}/qutebrowser"
    ses_fil="${dat_dir}/sessions/_autosave.yml"

    bas_dir_a="${XDG_RUNTIME_DIR}/qutebrowser"
    bas_dir_x="/home/${USER}/.cache/qutebrowserx"
    bas_dir_m="/home/${USER}/.cache/qutebrowserm"
    config_x="${HOME}/.config/qutebrowser/profile-x.py"
    config_m="${HOME}/.config/qutebrowser/profile-m.py"
    declare -rg mlx_fil_x="file:///run/user/${UID}/mutt/mview-x.html"
    declare -rg mlx_fil_y="file:///run/user/${UID}/mutt/mview-y.html"
    
    #soc_ipc="$(echo ${XDG_RUNTIME_DIR}/qutebrowser/*)"
    soc_ipc="${bas_dir}/ipc-$(echo -n "${USER}" | md5sum | cut -d' ' -f1)"
    [ -s "${soc_ipc}" ] || soc_ipc="$(echo ${bas_dir}/runtime/*)"
}

_qq_ini_qt()
{
    args_startup+=( '--qt-flag' 'ignore-gpu-blacklist' )
    args_startup+=( '--qt-flag' 'enable-gpu-rasterisation' )
    args_startup+=( '--qt-flag' 'enable-native-gpu-memory-buffers' )
    args_startup+=( '--qt-flag' 'num-raster-threads=4' )
    args_startup+=( '--qt-flag' 'enable-accelerated-video-decode' )
    args_startup+=( '--qt-flag' 'enable-features=VaapiVideoDecoder' )
    args_startup+=( '--qt-flag' 'enable-features=WebGPU' )
    args_startup+=( '--qt-flag' 'use-gl=desktop' )
    args_startup+=( '--qt-flag' 'enable-oop-rasterization' )
    args_startup+=( '--qt-flag' 'enable-raw-draw' )
}

_ini_profile()
{
    # set up on new system
    dictionaries="${HOME}/.local/share/qutebrowser/qtwebengine_dictionaries"
    /usr/share/qutebrowser/scripts/dictcli.py install en-GB
    #ln -s ${dictionaries} ${bas_dir_x}/data/
    ln -s ${dictionaries} ${bas_dir_x}/data/
    ln -s ${dictionaries} ${bas_dir_m}/data/
}

# factoring here was to make clear the structure of multiple layers of piping

_qute_str() { "${qute_bin}" "${args_startup[@]}" & }

_qute_cmd_x()
{
    # order of items matters; highly unstable to format innacuracies
    [ -n "${1}" ] && args_x="${@}" || args_x=${args}

    printf '{"args": ["%s"], "target_arg": null, "version": "%s", "protocol_version": %d, "cwd": "%s"}\n' \
       "${args_x}" \
       "${qb_version}" \
       "${proto_version}" \
       "${PWD}" |\
       socat -lf /dev/null - UNIX-CONNECT:"${soc_ipc}" ||\
       _qute_str &
}

_qute_cmd() { _qute_cmd_x ${@} ; }

#_qute_d()
#{
    #todo - daemon start
#}

# primary instance 

_mli()
{
    grep -q "url: ${1}" ${ses_fil} \
        && args+=( ":tab-select ${1} ;; reload" ) \
        || args+=( ":open -w ${1}" )
}


_qa()
{
    if [ -n "${1}" ]; then 
        case ${1} in
            mly)
                _qute_cmd_x ":session-save"
                ses_fil="${dat_dir}/sessions/default_restore.yml"
                _mli "${mlx_fil_y}" 
                #args_startup+=( ":open ${mlx_fil_y}" )
                ;;
            mlx)
                _mli "${mlx_fil_x}"
                #args_startup+=( ":open ${mlx_fil_x}" )
                ;;
            win)
                shift 1; args+=(":open -w ${@}")
                ;;
            tab)
                shift 1
                args+=(":open -t ${@}") 
                #args_startup+=( 
                ;;
            *)
                args+=(":open -t ${@}")
                ;;
        esac
    else 
        args+=(":open -w")
    fi
    
    #args_startup+=( "${@}" ) # TODO: modify qute_bin?
    #args_startup+=( '--override-restore' )
    args_startup+=( "${args}" )

    _qute_cmd &
}

# profile selectors 

_qi()
{
    args_startup+=( "--basedir"          "${bas_dir}" )
    args_startup+=( "--config-py"        "${cfg_fil}" )

    soc_ipc="$(echo ${bas_dir}/runtime/*)"
    ses_fil="${bas_dir}/data/sessions/_autosave.yml"

    _qa ${@}
}

# profiles 

_qx()
{
    bas_dir="${bas_dir_x}"
    cfg_fil="${config_x}"
    _qi   ${@}
}

_qm()
{
    bas_dir="${bas_dir_m}"
    cfg_fil="${config_m}"
    _qi   ${@}
}

_main()
{
    _ini

    case ${cmd} in
        xw|xwin|x)        _qx ${@} ;; # dup of 'x'
        xt|xtab)          _qx ${@} ;;
        xc|xcmd)          _qx ${@} ;;
        mt|mtab)          _qm tab ${@} ;;
        mw|mwin)          _qm win ${@} ;;
        mc|qmutt|m)       _qm ${@} ;;
        mx)               _qm mlx ${@} ;;
        my)               _qa mly ${@} ;;
        w.gpt|gpt)        _qa win "chat.openai.com" ;;
        w.wa|wa|whatsapp) _qa win "web.whatsapp.com" ;;

        t|tab)            _qa tab "${@}" ;;
        w|win)            _qa win "${@}" ;;
        c|cmd)            _qa "${@}" ;;
        *)                _qa "${cmd}" "${@}" ;;
    esac
}

_main ${@}

# from aliases; convert to autocomplete shortcuts
#alias qx='qb xwin'
#alias qxw='qb xwin'
#alias qxt='qb xtab'
#alias qf='qb win.float'
# task: make autocomple to replace aliases with args
#alias brw-wna="qb win"
#alias brw-wnf="qb win.float"
#alias brw-wxa="qb x"
#alias brw-wxf="qb x.win"
